// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/education-service"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  TUTOR
  STUDENT
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id            String     @id @map("_id")
  email         String     @unique
  name          String
  phone         String     @unique
  password      String
  role          Role
  status        UserStatus @default(ACTIVE)
  isOnline      Boolean    @default(false) @map("is_online")
  lastActive    DateTime?  @map("last_active")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  createdBy     String?    @map("created_by")
  updatedBy     String?    @map("updated_by")
  createdByUser User?      @relation("CreatedBy", fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedByUser User?      @relation("UpdatedBy", fields: [updatedBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdUsers  User[]     @relation("CreatedBy")
  updatedUsers  User[]     @relation("UpdatedBy")
  timeSlots     TimeSlot[]

  @@map("users")
}

model TimeSlot {
  id        String   @id @default(uuid()) @map("_id")
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("time_slots")
}
