// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/user-service"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TUTOR
  STUDENT
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id                   String         @id @default(cuid())
  email                String         @unique
  name                 String
  phone                String         @unique
  password             String
  role                 Role
  status               UserStatus     @default(ACTIVE)
  isOnline             Boolean        @default(false) @map("is_online")
  lastActive           DateTime?      @map("last_active")
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @updatedAt @map("updated_at")
  createdBy            String?        @map("created_by")
  updatedBy            String?        @map("updated_by")
  createdByUser        User?          @relation("CreatedBy", fields: [createdBy], references: [id])
  updatedByUser        User?          @relation("UpdatedBy", fields: [updatedBy], references: [id])
  createdUsers         User[]         @relation("CreatedBy")
  updatedUsers         User[]         @relation("UpdatedBy")
  tutorConversations   Conversation[] @relation("Tutor")
  studentConversations Conversation[] @relation("Student")
  UserCreateProfile    UserProfile[]  @relation("CreatedBy")
  UserUpdateProfile    UserProfile[]  @relation("UpdatedBy")
  userProfiles         UserProfile[]
  tutorProfiles        TutorProfile[]

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model UserProfile {
  id            String    @id
  avatar        String?
  idCardNumber  String?   @map("id_card_number")
  address       String?
  dob           DateTime
  gender        Gender
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  createdBy     String?   @map("created_by")
  updatedBy     String?   @map("updated_by")
  deletedAt     DateTime? @map("deleted_at")
  createdByUser User?     @relation("CreatedBy", fields: [createdBy], references: [id])
  updatedByUser User?     @relation("UpdatedBy", fields: [updatedBy], references: [id])
  user          User      @relation(fields: [id], references: [id])

  @@map("user_profiles")
}

enum TutorLevel {
  L1
  L2
  L3
  L4
  L5
  L6
  L7
  L8
  L9
  L10
  L11
  L12
  UNIVERSITY
  COLLAGE
  HIGH_SCHOOL
}

enum LearningType {
  ONLINE
  OFFLINE
}

model TutorProfile {
  id                  String         @id
  specializations     String[]
  experiences         Int
  rating              Float          @default(0)
  taughtStudentsCount Int            @default(0) @map("taught_students_count")
  tutorLocations      String[]
  hourlyPrice         Float          @map("hourly_price")
  fee                 Float
  level               TutorLevel
  learningTypes       LearningType[] @map("learning_types")
  user                User           @relation(fields: [id], references: [id])
  description         String         @map("description")

  @@map("tutor_profiles")
}

enum NotificationType {
  TUTOR_ACCEPTED
  TUTOR_REJECTED
  TUTOR_REMINDED
  CLASS_CANCELLED
  CONTRACT_SIGN
  PAYMENT_REMINDED
  PAYMENT_SUBMITTED
  ASSIGNMENT_RECEIVED
  ASSIGNMENT_REMINDED
  COMPLAINT_RESPONSE
  TUTOR_RATING
  TUTOR_REQUEST
  CLASS_CHECK_IN
  TUTOR_VERIFIED
  NEW_COMPLAINT
  ROOM_CREATE_REQUEST
  SYSTEM_ALERT
  CONTRACT_UPDATE
  NEW_UPDATE
  SYSTEM_MAINTENANCE
  PRICE_NEGOTIATION
  TEACH_REQUEST
  RECEIVE_CLASS
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  recipientId String
  createdAt   DateTime         @default(now()) @map("created_at")
  isRead      Boolean          @default(false) @map("is_read")
  type        NotificationType
  link        String?
  deleted     Boolean          @default(false)

  @@map("notifications")
}

model Conversation {
  id              String    @id
  tutorId         String
  studentId       String
  lastMessageTime DateTime  @map("last_message_time")
  tutor           User      @relation("Tutor", fields: [tutorId], references: [id])
  student         User      @relation("Student", fields: [studentId], references: [id])
  messages        Message[]

  @@map("conversations")
}

model Media {
  id        String  @id
  url       String
  type      String
  size      Int
  messageId String
  message   Message @relation(fields: [messageId], references: [id])

  @@map("medias")
}

model Message {
  id             String       @id
  senderId       String
  conversationId String
  message        String
  sentAt         DateTime     @map("sent_at")
  isRead         Boolean      @default(false) @map("is_read")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  media          Media[]

  @@map("messages")
}

model InvalidToken {
  id        String   @id
  expiredAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("invalid_tokens")
}
